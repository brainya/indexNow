// Package indexnow provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package indexnow

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// UrlSet defines model for UrlSet.
type UrlSet struct {
	// Host The host for the urls to be indexed
	Host *string `json:"host,omitempty"`

	// Key should have a minimum of 8 and a maximum of 128 hexadecimal characters. The key can contain only the following characters: lowercase characters (a-z), uppercase characters (A-Z), numbers (0-9), and dashes (-).
	Key *string `json:"key,omitempty"`

	// KeyLocation To be used in case the user specifies an alternative location
	KeyLocation *string `json:"keyLocation"`

	// UrlList The set of urls to be submitted
	UrlList *[]string `json:"urlList,omitempty"`
}

// GetIndexnowParams defines parameters for GetIndexnow.
type GetIndexnowParams struct {
	// Url a URL of your website which has been added, updated, or deleted. URL must be URL-escaped and encoded and please make sure that your URLs follow the RFC-3986 standard for URIs.
	Url string `form:"url" json:"url"`

	// Key should have a minimum of 8 and a maximum of 128 hexadecimal characters. The key can contain only the following characters: lowercase characters (a-z), uppercase characters (A-Z), numbers (0-9), and dashes (-).
	Key string `form:"key" json:"key"`

	// KeyLocation A parameter that allows you to specify the key location in case it doesn't exist at the website root
	KeyLocation *string `form:"keyLocation,omitempty" json:"keyLocation,omitempty"`
}

// PostIndexnowJSONRequestBody defines body for PostIndexnow for application/json ContentType.
type PostIndexnowJSONRequestBody = UrlSet

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetIndexnow request
	GetIndexnow(ctx context.Context, params *GetIndexnowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIndexnow request with any body
	PostIndexnowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIndexnow(ctx context.Context, body PostIndexnowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetIndexnow(ctx context.Context, params *GetIndexnowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexnowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIndexnowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIndexnowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIndexnow(ctx context.Context, body PostIndexnowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIndexnowRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetIndexnowRequest generates requests for GetIndexnow
func NewGetIndexnowRequest(server string, params *GetIndexnowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/indexnow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.KeyLocation != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyLocation", runtime.ParamLocationQuery, *params.KeyLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIndexnowRequest calls the generic PostIndexnow builder with application/json body
func NewPostIndexnowRequest(server string, body PostIndexnowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIndexnowRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIndexnowRequestWithBody generates requests for PostIndexnow with any type of body
func NewPostIndexnowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/indexnow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetIndexnow request
	GetIndexnowWithResponse(ctx context.Context, params *GetIndexnowParams, reqEditors ...RequestEditorFn) (*GetIndexnowResponse, error)

	// PostIndexnow request with any body
	PostIndexnowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIndexnowResponse, error)

	PostIndexnowWithResponse(ctx context.Context, body PostIndexnowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIndexnowResponse, error)
}

type GetIndexnowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIndexnowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexnowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIndexnowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIndexnowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIndexnowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetIndexnowWithResponse request returning *GetIndexnowResponse
func (c *ClientWithResponses) GetIndexnowWithResponse(ctx context.Context, params *GetIndexnowParams, reqEditors ...RequestEditorFn) (*GetIndexnowResponse, error) {
	rsp, err := c.GetIndexnow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexnowResponse(rsp)
}

// PostIndexnowWithBodyWithResponse request with arbitrary body returning *PostIndexnowResponse
func (c *ClientWithResponses) PostIndexnowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIndexnowResponse, error) {
	rsp, err := c.PostIndexnowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIndexnowResponse(rsp)
}

func (c *ClientWithResponses) PostIndexnowWithResponse(ctx context.Context, body PostIndexnowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIndexnowResponse, error) {
	rsp, err := c.PostIndexnow(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIndexnowResponse(rsp)
}

// ParseGetIndexnowResponse parses an HTTP response from a GetIndexnowWithResponse call
func ParseGetIndexnowResponse(rsp *http.Response) (*GetIndexnowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexnowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIndexnowResponse parses an HTTP response from a PostIndexnowWithResponse call
func ParsePostIndexnowResponse(rsp *http.Response) (*PostIndexnowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIndexnowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWzY4jNRB+lZJBYiIlnZ9BaDe3YSVQpACrLHNhNYdKu5L2jtv22OXJhFUkXoPX40lQ",
	"udOZWZLhwpGbu9r2Vz/fV+XPqvZt8I4cJzX/rFLdUItleRvtB2JZhegDRTZU7I1Pxaop1dEENt6pufq1",
	"IZA/sPERuCHI0SZgD2sC4zQ9kVZDxftAaq4SR+O26jBU97Q/vys1PlsNDT4SILTGmTa34DfwBtBpMeFT",
	"b5rO3kBDT6ipNi1aqBuMWDPFVIH4dE97qNFB7R2jceCd3Rf/Nt5avzNu++LIHKzfUawx0QsrXOHo98EQ",
	"cggX/t2MfhsMweV2XT4no7eDYXFTY2oowdVoUL0S+dLX2IV8ls2St5xIg3FQMEtOE0VIgWqzMZQAHaBl",
	"ig7ZPBLY/rqhctlaXFtSc46ZLqDnaJfmtTomYkntiwqmvG4Nc6mhYWoLEc4uPRowRtyrw7PBrz9Rzeog",
	"JuM2/hz1xoEP5ACDKfEVFn0svPnZ7+6uGuaQ5uPxbreritX5XeXjdjyQ1BqWSNWHHW63FOGXQO7m/QJG",
	"p9V1NVFD9UgxdXDTalJNp+KyoGIwaq6uq0nZFZCbEt64B5KPbacE0UHJ8UKrufqReNHvkYMRWxJSqPnH",
	"fwaIcLtaSlL3PkfY0ToZJtg1pm6gwQRrkui1Ji0808iy8BE0WWLSVTne5sRSjdvVckSpxkC6MI1c7fVx",
	"HSwJW1q8l6pF4Q1yh3q7WqYj7QubVj+8G12/ffMdJEanMeqS9dvVIglhjbj9kCnuhU/YSoZztGqoIj1k",
	"E0n35Op6xgVGHIb/B2VfSpS0tf+UqBs40amrIEpMSQopkux6QBeu5KGX/qlbGAbtKblvGOjJJAbksrln",
	"XvSeX/d9+dxJXvf5TgJMwbvUzYXZZHIubKHtqXlAynVNKW2ytXtR32wyu3wkUk3mUXi/OPaAEuYjWqO7",
	"QAM5bdy2kmu+vYS8cGW3cLpF7rZdX9rWJcxvCoLz3KHAFVXb6mTb+Oz0EDbGUreGdebTX+M64hlLg4I0",
	"m/0rUlFiJ37t3V9//Cmytt5tpbbcT9LjIBUQkwpOi1w3Qmyxd5XpsUP07GtvO/i3l0aKh5/Q7WFFD5kS",
	"J7gKnsmxQQsfAraD0rJTbluM++KvpidASMZtbZnngtW3acEJx5fAl13xvU8v22Ls4L73ukx6USu5cgxD",
	"sKYj2vhT6sbgM92+jrRRc/XV+PmBMj6+TsbHp0kZKF9GSU4HbxwXkRTewTrbe/F+WMQjHeP4IwfZNZ1M",
	"JpMSXU5dak2C/pozER/OSD89T/W7SNLAxb8yBXF7aSScmH0q3UmC/eBTh7vD3wEAAP//3ZyvC6IJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
